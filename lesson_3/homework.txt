 Домашнее задание

 Задание

Написать программу, которая

- Запрашивает у пользователя имя и возраст;

- Проверяет минимальный возраст 14;

- Проверяет, что имя введено и минимальное количество символов в имени — 3;

- Проверяет возраст на отрицательное число или 0;

- Проверяет имя на пустоту;

- \* Проверяет, что возраст 16-17 лет и нужно не забыть получить первый паспорт; возраст 25-26 лет и нужно заменить

паспорт; возраст 45-46 лет и нужно второй раз заменить паспорт;

- Выводит либо текст с ошибкой (по каждому условию разный текст ошибки), либо приветствие пользователя с его именем (с

заглавной буквы), указанием возраста и *советом получить/заменить паспорт (если совет актуален).

- \* Совет с паспортом выводить только в том случае, если отображается приветствие.

 Ограничения:

- только один раз можно использовать print

 Дополнительная информация, которая может вам пригодиться:

- Можно писать на русском языке текст внутри строк.

- Внутри блока кода в ветвлениях if-elif-else возможно писать еще if-elif-else.

 Примеры:

1. '[Enter], 20' — Ошибка: пустое имя.

2. 'кх, 10' — Ошибка: Минимальный возраст — 14 лет. И/или Ошибка: В имени должно быть минимум 3 символа. Зависит от вас

какая ошибка будет и как будут организованы проверки.

3. 'ксения, 14' — Привет, Ксения! Тебе 14 лет.

4. 'дмитрий, 25' — Привет, Дмитрий! Тебе 25 лет. Не забудь заменить паспорт по достижению 25 лет.

5. 'никита, 32' — Привет, Никита! Тебе 32 лет.

 Итог

 Общие моменты:

1. Все с if прекрасно разобрались, поняли как он работает, для чего elif и else.

2. Проверка пустого имени (пустая строка) можно было сделать следующим образом: `if not name`.

3. `if age == 16 or age == 17` лучше было бы написать `if 16 <= age <= 17`.

4. Алгоритмически верная программа получилась не у всех.

 Правильный алгоритм:

1. Потребовать у пользователя ввести данные

2. Создать переменную text (название переменной значение не имеет) с пустой строкой

3. Валидация данных (в любом порядке):

- Проверить имя

- Проверить возраст

Здесь можно обойтись одним if, а можно разделить обе проверки на имя и возраст на два if. Проверять нужно негативные

сценарии - в случае их выполнения к переменной text добавляем ошибку. Если были проверки разделены на 2 if, то так

можно вывести пользователю сразу две ошибки одновременно (если обе проверки не прошли).

4. Необходимо проверить переменную text, что она пустая. Если переменная оказалась пустой, значит ошибок никаких не

было.

1. Здесь уже можно создать приветствие пользователю.

Именно здесь, а не раньше, потому что, если бы приветствие было создано до текущего шага, проверяете после

входные данные пользователя и обнаруживается, что приветствие выводить ему это не нужно, а нужно создать ошибку.

Всегда нужно сначала проверять введенные данные, а потом уже доверять пользователю и что-то делать с его данными.

Важно понимать, что ввести могут всегда и в любом случае абсолютно что угодно. Даже, когда вы будете делать API

бэкенда, у вас будет фронтенд, который вы, может быть, даже сами напишете, и будете четко знать, что фронт

отправляет исключительно верные данные. Но фронт - это всего лишь красивая обертка, которым пользователи могут

пользоваться, а могут и не пользоваться. Поэтому никогда нельзя доверять пользователю и его данным. Всегда нужно

перепроверять и валидировать данные, что все хорошо.

Речь тут идет как минимум про удобство: получили данные и сразу же проверили, что вы можете с ними работать, а

далее у вас голова никогда не болит насчет этих данных. А иначе вы можете с легкостью потом забыть когда, и что

вы проверяли и проверяли ли вообще.

Вывод: сначала проверяем исключения (ошибки), а только после этого реализовываем положительный сценарий, когда

все данные верные.

2. Проверяем возраст для рекомендации на получение паспорта

Делаем это все через if-elif. Если какая-то проверка удовлетворяется, к переменной text добавляем текст с

советом.

5. Вызвать print с аргументом в виде переменной text.